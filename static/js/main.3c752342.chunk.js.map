{"version":3,"sources":["components/loading.svg","../node_modules/@auth0/auth0-spa-js/dist sync","react-auth0-spa.js","history.js","components/FeedItem.js","components/Feed.js","components/Jumbotron.js","components/Navigation.js","components/Contact.js","components/About.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","createBrowserHistory","FeedItem","feed","className","name","price","dangerouslySetInnerHTML","__html","description","src","image","height","Feed","feeds","map","key","Jumbotron","props","Navigation","class","onClick","to","Contact","About","App","state","jumbotronTitle","axios","get","resp","this","setState","data","exact","path","component","Component","Boolean","hostname","match","ReactDOM","render","domain","config","client_id","clientId","redirect_uri","origin","push","targetUrl","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c752342.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.c5590569.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 77;","import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (\n        window.location.search.includes(\"code=\") &&\n        window.location.search.includes(\"state=\")\n      ) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React from \"react\";\n\nconst FeedItem = ({ feed }) => {\n  return (\n      <div className=\"col-md-6 item\">\n\n        <h4>{feed.name}</h4>\n        <p className=\"badge badge-secondary\">{`$  ${feed.price}`}</p>\n        <p className=\"description\" dangerouslySetInnerHTML={{ __html:  feed.description}} />\n        <img src={feed.image} height={150}></img>\n      </div>\n  );\n};\n\nexport default FeedItem;\n","import React from \"react\";\nimport FeedItem from \"./FeedItem\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Feed = ({ feeds }) => {\n  const { isAuthenticated } = useAuth0();\n  return (\n    <div className=\" row marketing \">\n      {isAuthenticated && feeds.map(feed =>\n        <FeedItem key={feed.id} feed={feed} ></FeedItem>\n      )}\n    </div>\n\n  );\n};\n\nexport default Feed;\n","import React from \"react\";\n\nconst Jumbotron = (props) => {\n  return (\n    <div className=\"jumbotron\">\n      <h2>{props.title}</h2>\n    </div>\n  );\n};\n\nexport default Jumbotron;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Navigation = (props) => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n  return (\n    <div className=\"header\">\n      {!isAuthenticated && (\n        <ul className=\"nav nav-pills pull-right\">\n          <li><button class=\"btn btn-primary\" onClick={() => loginWithRedirect({})}>Log in</button></li>\n        </ul>\n      )}\n      {isAuthenticated && (\n        <ul className=\"nav nav-pills pull-right\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/contact\">Contact</Link>\n          </li>\n          <li><button class=\"btn btn-primary\" onClick={() => logout()}>Log out</button></li>\n        </ul>\n      )}\n      <h3 className=\"text-muted\">Secure React App</h3>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n\nconst Contact = (props) => {\n  return (\n    <div>\n      <h2>Contact</h2>\n    </div>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\n\nconst About = (props) => {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n};\n\nexport default About;\n","import React, { Component } from \"react\";\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport history from \"../history\";\nimport Feed from \"./Feed\";\nimport Jumbotron from \"./Jumbotron\";\nimport Navigation from \"./Navigation\";\nimport Contact from './Contact';\nimport About from './About';\nimport Loading from \"./Loading\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jumbotronTitle: \"Products catalogue\",\n      feeds: [],\n    };\n  }\n  \n  async componentDidMount() {\n    const url = \"https://hplussport.com/api/products/order/price/sort/asc/qty/8\";\n    const resp = await axios.get(url);\n    return this.setState({ feeds: resp.data })\n  }\n  render() {\n    const { jumbotronTitle, feeds } = this.state;\n    return (\n      <Router history={history}>\n        <div className=\"container\">\n          <Navigation></Navigation>\n          <Jumbotron title={jumbotronTitle}></Jumbotron>\n          <Switch>\n            {/* <Route\n                exact\n                path=\"/\"\n                render={(props) => <Feed feeds={feeds}></Feed>}\n              ></Route> */}\n            <Route\n              exact\n              path=\"/\"\n            >\n              <Feed feeds={feeds}></Feed>\n            </Route>\n            <Route path=\"/contact\" component={Contact}></Route>\n            <Route path=\"/about\" component={About}></Route>\n          </Switch>\n\n\n          <div className=\"footer\">\n            <p>&copy; demi.y.zhao@gmail.com</p>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./history\";\n\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}